{"mappings":"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","sources":["FinalProject/js/utilities.js","FinalProject/js/imdbmovies.js","FinalProject/js/mymovies.js","FinalProject/js/mymoviesview.js","FinalProject/js/index.js","FinalProject/js/searchmoviescontroller.js","FinalProject/js/mymoviescontroller.js"],"sourcesContent":["// export function getJSON(url) {\n//     return fetch(url)\n//     .then(response => response.json())\n//     .then(data => console.log(data))\n//     .catch(function(error) {\n//         console.log(error);\n//     })\n// };\n\nexport function getJSON(url) {\n    return fetch(url)\n    .then(function(response) {\n        if (!response.ok) {\n            throw Error(response.statusText);\n        } else {\n            return response.json();\n        }\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n}\n\nexport const getLocation = function(options) {\n    return new Promise(function(resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n};","import { getJSON } from './utilities.js';\r\n\r\nexport default class imdbMovies {\r\n    apikey = \"cee23b41\"\r\n    constructor() {\r\n        this.baseUrl = `https://www.omdbapi.com/?apikey=${this.apikey}&`;\r\n        this._myMovies = [];\r\n    }\r\n    async searchByMovieTitle(title) {\r\n        const url = `${this.baseUrl}s=${title}`;\r\n        const response = await getJSON(url);\r\n        return response;\r\n    }\r\n    async getMovieById(imdbID) {\r\n        const url = `${this.baseUrl}i=${imdbID}`;\r\n        const response = await getJSON(url);\r\n        return response;\r\n    }\r\n}\r\n","//import * as store from \"store2\";\r\nimport imdbMovies from './imdbMovies.js';\r\n\r\nexport default class MyMovies {\r\n    constructor() {\r\n        this.imdbMovies = new imdbMovies();\r\n        this.movieChangedEvents = [];\r\n        this.getMyMovies()\r\n    }\r\n    getMyMovies() {\r\n        this._myMovies = load(\"myMovies\");\r\n        if (!this._myMovies) {\r\n            this._myMovies = [];\r\n        }\r\n        return this._myMovies;\r\n    }\r\n    addMovieChangeListener(callback) {\r\n        this.movieChangedEvents.push(callback);\r\n    }\r\n    getMyMovieById(imdbID) {\r\n        return this._myMovies.filter(item => item.imdbID === imdbID)[0];\r\n    }\r\n    async addMovie(movie) {\r\n        this._myMovies.push(movie);\r\n        save(\"myMovies\", this._myMovies);\r\n        this.movieChangedEvents.forEach(callback => callback(movie));\r\n        return movie;\r\n    }\r\n    watchMovie(imdbID) {\r\n        console.log(\"watching movie \" + imdbID);\r\n        const movie = this.getMyMovieById(imdbID);\r\n        movie.watched = movie.watched ? false : true;\r\n        save(\"myMovies\", this._myMovies);\r\n        this.movieChangedEvents.forEach(callback => callback(movie));\r\n    }\r\n    likeMovie(imdbID) {\r\n        console.log(\"liking movie \" + imdbID);\r\n        const movie = this.getMyMovieById(imdbID);\r\n        movie.liked = movie.liked ? false : true;\r\n        save(\"myMovies\", this._myMovies);\r\n        this.movieChangedEvents.forEach(callback => callback(movie));\r\n    }\r\n    removeMovie(imdbID) {\r\n        console.log(\"removing movie \" + imdbID);\r\n        const movie = this.getMyMovieById(imdbID);\r\n        this._myMovies = this._myMovies.filter(item => item.imdbID !== imdbID);\r\n        save(\"myMovies\", this._myMovies);\r\n    }\r\n}\r\n\r\nfunction load(name){ //retrieves items in the localStorage\r\n    console.log(\"retrive records\");\r\n    let recordsJSON = window.localStorage.getItem(name); //searches for the key in localStorage\r\n    let records =JSON.parse(recordsJSON)\r\n    //console.log(records)\r\n    return records;\r\n}\r\n\r\nfunction save(name, data){ //stores items in the localStorage\r\n    window.localStorage.setItem(name,JSON.stringify(data));  \r\n    console.log(\"save records\");\r\n    //converting object to string\r\n}\r\n\r\nfunction clearStorage(){ //clears the entire localStorage\r\n    localStorage.clear()\r\n    console.log(\"clear records\");\r\n}","// MyMovie View handler\r\nexport default class MyMoviesView {\r\n    renderSelectMovieList(searchResults, listElement, myMovieList){\r\n      listElement.innerHTML = \"\"\r\n      searchResults.forEach(movie => {\r\n        const item = document.createElement('div');\r\n        item.setAttribute('data-id', movie.imdbID);\r\n        item.innerHTML = this.getMoviePoster(movie, '<button class=\"add_movie\">Add Movie</button>')\r\n        if(myMovieList.find(myMovie => myMovie.imdbID === movie.imdbID)){\r\n          item.firstElementChild.classList.add(\"added\")   \r\n        }\r\n        listElement.appendChild(item);\r\n      });\r\n\r\n    }\r\n    renderMoviesList(myMovieList, listElement) {\r\n      listElement.innerHTML = \"\"\r\n      myMovieList.forEach(movie => {\r\n        const item = document.createElement('div');\r\n        item.setAttribute('data-id', movie.imdbID);\r\n        item.setAttribute('class', 'movie_poster_container show');\r\n        if(movie.liked){\r\n          item.classList.add(\"liked_movie\")\r\n        }\r\n        if(movie.watched){\r\n          item.classList.add(\"watched_movie\")\r\n        }\r\n        item.setAttribute('id', \"movie-Id-\"+movie.imdbID);\r\n        const footerText =  '<div class=\"movie_poster__footer\"><button class=\"watch_movie\">Watched</button><button class=\"like_movie\">Liked</button><button class=\"remove_movie\">Remove</button></div>'\r\n        item.innerHTML = this.getMoviePoster(movie, footerText)\r\n        listElement.appendChild(item);\r\n      });\r\n      \r\n    }\r\n    getMoviePoster(movie,extraElements=\"\") {\r\n      return `\r\n      <div class=\"movie_poster\">\r\n        <img src=${movie.Poster} class=\"image\"></img>\r\n        <div class=\"title\">${movie.Title}</div>\r\n        <p class=\"year\"> Year: ${movie.Year}</p>\r\n        ${extraElements}\r\n      </div>\r\n      `;\r\n    }\r\n    renderMyMovieDetails(movie, element) {\r\n      const movieProperties = Object.entries(movie.properties);\r\n      // for the provided movie make a list of each of the properties associated with it. Then append the list to the provided element. Notice the first line of this method. Object.entries() is a slick way to turn an object into an array so that we can iterate over it easier!\r\n      element.innerHTML = movieProperties\r\n      .map(item => {\r\n        if (item[0] === 'time' || item[0] === 'updated') {\r\n          return `<li>${item[0]}: ${new Date(item[1])}</li>`;\r\n        } else return `<li>${item[0]}: ${item[1]}</li>`;\r\n      })\r\n      .join('');\r\n    }\r\n  }  ","import {MyMoviesController} from './mymoviescontroller.js';\r\nimport { SearchMoviesController } from \"./searchmoviescontroller.js\";\r\nimport MyMovies from './mymovies.js';\r\n\r\n// import * as store from 'store2';\r\n//const store = require(\"store2\");\r\n\r\nconst myMovies = new MyMovies();\r\nconst searchMoviesController = new SearchMoviesController('#searchMoviesList',myMovies);\r\nconst myMoviesController = new MyMoviesController('#myMoviesList',myMovies);\r\nsearchMoviesController.init();\r\nmyMoviesController.init();\r\n\r\nconst addButton = document.querySelector('#addMovies');\r\naddButton.addEventListener('click', (event) => {\r\n    console.log(event)\r\n    const slideShelf = document.querySelector('#slideShelf');\r\n    const container = document.querySelector('#container');\r\n    if(container.classList.contains('addActive')){\r\n        event.currentTarget.innerHTML = 'Add Movies'; \r\n    } else {\r\n        event.currentTarget.innerHTML = 'See My Movies'; \r\n    }\r\n    container.classList.toggle('addActive');\r\n    slideShelf.classList.toggle('addActive');\r\n});\r\n\r\n","import imdbMovies from './imdbMovies.js';\r\nimport MyMoviesView from './mymoviesview.js';\r\nimport MyMovies from './mymovies.js';\r\n\r\nexport class SearchMoviesController {\r\n    constructor(parentElementId, myMovies) {\r\n        this.imdbMovies = new imdbMovies();\r\n        this.myMovies = myMovies;\r\n        this.myMoviesView = new MyMoviesView();\r\n        this.parentElement = document.querySelector(parentElementId);\r\n        this.currentSearchedMovies = []\r\n    }\r\n    init() {\r\n        this.form = document.forms[0];\r\n        this.form.addEventListener('submit', this.searchForMovies.bind(this), false);\r\n    }\r\n    async searchForMovies(event) {\r\n        // prevent the form from being submitted\r\n        event.preventDefault();   \r\n        this.parentElement.innerHTML = '<p>This could take a while ...</p>';\r\n\r\n        const movieName = this.form.movieName.value;\r\n        const movieList = await this.imdbMovies.searchByMovieTitle(movieName);\r\n        this.currentSearchedMovies = movieList.Search;\r\n        console.log(this.currentSearchedMovies)\r\n        const myMovies = this.myMovies.getMyMovies()\r\n        this.myMoviesView.renderSelectMovieList(this.currentSearchedMovies, this.parentElement, myMovies );\r\n        document.querySelectorAll('.add_movie').forEach(button => {\r\n            button.addEventListener('click', this.addMovie.bind(this), false);\r\n        });        \r\n    }\r\n    async addMovie(event) {\r\n        const movieID = event.target.parentElement.parentElement.getAttribute('data-id');\r\n        const movieDetails = await this.imdbMovies.getMovieById(movieID);\r\n        await this.myMovies.addMovie(movieDetails);\r\n        const myMovies = this.myMovies.getMyMovies()\r\n        this.myMoviesView.renderSelectMovieList(this.currentSearchedMovies, this.parentElement, myMovies);\r\n        document.querySelectorAll('.add_movie').forEach(button => {\r\n            button.addEventListener('click', this.addMovie.bind(this), false);\r\n        });        \r\n        // force a draw then show message\r\n        // setTimeout(() => {  alert(\"Movie added to My Movies!\"); }, 50);\r\n \r\n    }   \r\n}\r\n\r\n","import { getLocation } from './utilities.js';\r\nimport myMovies from './mymovies.js';\r\nimport MyMoviesView from './mymoviesview.js';\r\n\r\n// myMovies controller\r\nexport class MyMoviesController {\r\n  constructor(parent, myMovies) {\r\n    this.parent = parent;\r\n    this.parentElement = null;\r\n    this.currentMovies = [];\r\n    this.myMovies = myMovies;\r\n    this.myMoviesView = new MyMoviesView();\r\n  }\r\n  async init() {\r\n    this.parentElement = document.querySelector(this.parent);\r\n    this.currentMovies = this.myMovies.getMyMovies();\r\n    this.myMoviesView.renderMoviesList(this.currentMovies, this.parentElement); \r\n    this.assignEventListeners()   \r\n  }\r\n  assignEventListeners(){\r\n    this.myMovies.addMovieChangeListener(this.renderMoviesList.bind(this));\r\n    document.querySelectorAll('.watch_movie').forEach(button => {\r\n      button.addEventListener('click', this.watchMovie.bind(this), false);\r\n    });    \r\n    document.querySelectorAll('.like_movie').forEach(button => {\r\n      button.addEventListener('click', this.likeMovie.bind(this), false);\r\n    });\r\n    document.querySelectorAll('.remove_movie').forEach(button => {\r\n      button.addEventListener('click', this.removeMovie.bind(this), false);\r\n    });\r\n  }\r\n  renderMoviesList(newMovie) {\r\n    console.log(\"rendering movieList\");\r\n    this.parentElement = document.querySelector(this.parent);\r\n    this.myMoviesView.renderMoviesList(this.myMovies.getMyMovies(), this.parentElement);    \r\n    const newMovieElement = document.getElementById(\"movie-Id-\" + newMovie.imdbID);\r\n     this.assignEventListeners();\r\n     \r\n  }\r\n  removeMovie(event){\r\n    const movieID = event.target.parentElement.parentElement.parentElement.getAttribute('data-id');\r\n    this.myMovies.removeMovie(movieID);\r\n    this.currentMovies = this.myMovies.getMyMovies();\r\n    this.myMoviesView.renderMoviesList(this.currentMovies, this.parentElement); \r\n    this.assignEventListeners()   \r\n  }\r\n  watchMovie(event){\r\n    const movieID = event.target.parentElement.parentElement.parentElement.getAttribute('data-id');\r\n    this.myMovies.watchMovie(movieID);\r\n  };\r\n  likeMovie(event){\r\n    const movieID = event.target.parentElement.parentElement.parentElement.getAttribute('data-id');\r\n    this.myMovies.likeMovie(movieID);\r\n  };\r\n\r\n\r\n}"],"names":["$672973d77fba8d9c$export$d047a7c56db64af4","url","fetch","then","response","ok","json","Error","statusText","catch","error","console","log","$5da794bcab61e67f$export$2e2bcd8739ae039","apikey","constructor","this","baseUrl","_myMovies","async","title","imdbID","$652f056ff1c8a1fa$var$save","name","data","window","localStorage","setItem","JSON","stringify","$014310af2c21a05a$export$2e2bcd8739ae039","renderSelectMovieList","searchResults","listElement","myMovieList","innerHTML","forEach","movie","item","document","createElement","setAttribute","getMoviePoster","find","myMovie","firstElementChild","classList","add","appendChild","renderMoviesList","liked","watched","extraElements","Poster","Title","Year","element","movieProperties","Object","entries","properties","$b492b2c5071bc23a$var$myMovies","imdbMovies","movieChangedEvents","getMyMovies","recordsJSON","getItem","parse","$652f056ff1c8a1fa$var$load","addMovieChangeListener","callback","push","getMyMovieById","filter","watchMovie","likeMovie","removeMovie","$b492b2c5071bc23a$var$searchMoviesController","parentElementId","myMovies","myMoviesView","parentElement","querySelector","currentSearchedMovies","init","form","forms","addEventListener","searchForMovies","bind","event","preventDefault","movieName","value","movieList","searchByMovieTitle","Search","querySelectorAll","button","addMovie","movieID","target","getAttribute","movieDetails","getMovieById","$b492b2c5071bc23a$var$myMoviesController","parent","currentMovies","assignEventListeners","newMovie","getElementById","slideShelf","container","contains","currentTarget","toggle"],"version":3,"file":"index.f06cf340.js.map"}